import xerial.sbt.Sonatype.GitHubHosting

val mainScala = "2.13.3"
val allScala  = Seq("2.12.11", mainScala)

// Allows to silence scalac compilation warnings selectively by code block or file path
// This is only compile time dependency, therefore it does not affect the generated bytecode
// https://github.com/ghik/silencer
lazy val silencer = {
  val Version = "1.7.1"
  Seq(
    compilerPlugin("com.github.ghik" % "silencer-plugin" % Version cross CrossVersion.full),
    "com.github.ghik" % "silencer-lib" % Version % Provided cross CrossVersion.full
  )
}

enablePlugins(GitVersioning)

ThisBuild / publishTo := sonatypePublishToBundle.value

inThisBuild(
  List(
    organization := "nl.vroste",
    homepage := Some(url("https://github.com/svroonland/zio-kinesis")),
    licenses := List("Apache-2.0" -> url("http://www.apache.org/licenses/LICENSE-2.0")),
    scalaVersion := mainScala,
    crossScalaVersions := allScala,
    parallelExecution in Test := false,
    cancelable in Global := true,
    fork in Test := true,
    fork in run := true,
    assemblyMergeStrategy in assembly := {
      case PathList("META-INF", xs @ _*)       => MergeStrategy.discard
      case n if n.startsWith("reference.conf") => MergeStrategy.concat
      case _                                   => MergeStrategy.first
    },
    scmInfo := Some(
      ScmInfo(url("https://github.com/svroonland/zio-kinesis/"), "scm:git:git@github.com:svroonland/zio-kinesis.git")
    ),
    sonatypeProjectHosting := Some(
      GitHubHosting("svroonland", "zio-kinesis", "info@vroste.nl")
    ),
    developers := List(
      Developer(
        "svroonland",
        "Vroste",
        "info@vroste.nl",
        url("https://github.com/svroonland")
      )
    ),
    resolvers += "Sonatype OSS Snapshots" at "https://oss.sonatype.org/content/repositories/snapshots"
  )
)

lazy val commonSettings = Seq(
  Test / scalacOptions ++= {
    if (scalaBinaryVersion.value == "2.13") Seq("-P:silencer:globalFilters=[import scala.collection.compat._]")
    else Seq.empty
  },
  Compile / scalacOptions ++= {
    if (scalaBinaryVersion.value == "2.13") Seq("-P:silencer:globalFilters=[import scala.collection.compat._]")
    else Seq.empty
  },
  doc / scalacOptions ++= {
    if (scalaBinaryVersion.value == "2.13") Seq("-P:silencer:globalFilters=[import scala.collection.compat._]")
    else Seq.empty
  }
)

// Suppresses problems with Scaladoc @throws links
scalacOptions in (Compile, doc) ++= Seq("-no-link-warnings")

testFrameworks += new TestFramework("zio.test.sbt.ZTestFramework")

addCommandAlias("fmt", "all scalafmtSbt scalafmt test:scalafmt")
addCommandAlias("check", "all scalafmtSbtCheck scalafmtCheck test:scalafmtCheck")

lazy val root = (project in file("."))
  .aggregate(core, interopFutures)
  .dependsOn(core, interopFutures)

lazy val core = (project in file("core"))
  .enablePlugins(ProtobufPlugin)
  .settings(
    name := "zio-kinesis",
    scalafmtOnCompile := true,
    libraryDependencies ++= Seq(
      "dev.zio"                %% "zio"                         % "1.0.3",
      "dev.zio"                %% "zio-streams"                 % "1.0.3",
      "dev.zio"                %% "zio-test"                    % "1.0.3" % "test",
      "dev.zio"                %% "zio-test-sbt"                % "1.0.3" % "test",
      "dev.zio"                %% "zio-interop-reactivestreams" % "1.0.3.5",
      "dev.zio"                %% "zio-logging"                 % "0.5.3",
      "software.amazon.awssdk"  % "kinesis"                     % "2.15.19",
      "ch.qos.logback"          % "logback-classic"             % "1.2.3",
      "software.amazon.kinesis" % "amazon-kinesis-client"       % "2.2.11",
      "org.scala-lang.modules" %% "scala-collection-compat"     % "2.2.0",
      "org.hdrhistogram"        % "HdrHistogram"                % "2.1.12",
      "javax.xml.bind"          % "jaxb-api"                    % "2.3.1"
    ) ++ {
      if (scalaBinaryVersion.value == "2.13") silencer else Seq.empty
    }
  )
  .settings(commonSettings: _*)

lazy val interopFutures = (project in file("interop-futures"))
  .settings(
    name := "zio-kinesis-future",
    assemblyJarName in assembly := "zio-kinesis-future" + version.value + ".jar",
    libraryDependencies ++= Seq(
      "nl.vroste" %% "zio-kinesis"                 % "0.16",
      "dev.zio"   %% "zio-interop-reactivestreams" % "1.0.3.5"
    )
  )
  .dependsOn(core)
